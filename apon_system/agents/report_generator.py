import logging
from datetime import datetime
from typing import List, Dict

logger = logging.getLogger('ReportGenerator')

def generate_markdown_report(analyses: List[Dict]) -> str:
    """Generate markdown report from analyses."""
    report = f"""# üìä Apon Family Mart - Daily Market Intelligence Report\nGenerated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n## üìà Executive Summary\n- **Products Analyzed**: {len(analyses)}\n- **Report Date**: {datetime.now().strftime('%B %d, %Y')}\n- **Market Status**: Active Monitoring\n\n---\n\n"""
    for analysis in analyses:
        if not analysis:
            continue
        report += f"""## üõçÔ∏è {analysis['product_name']}\n\n### Price Statistics\n- **Minimum Price**: {analysis['price_statistics']['min_price']:.2f} BDT\n- **Maximum Price**: {analysis['price_statistics']['max_price']:.2f} BDT\n- **Average Price**: {analysis['price_statistics']['avg_price']:.2f} BDT\n- **Price Range**: {analysis['price_statistics']['max_price'] - analysis['price_statistics']['min_price']:.2f} BDT\n\n### Competitor Analysis\n"""
        for competitor, data in analysis['competitor_analysis'].items():
            report += f"- **{competitor}**: {data['avg_price']:.2f} BDT (Availability: {data['availability_rate']:.1f}%)\n"
        report += f"\n### Key Insights\n"
        for insight in analysis['insights']:
            report += f"- {insight}\n"
        report += "\n---\n\n"
    report += f"""## üìã Recommendations\n1. Monitor competitors with lowest prices for potential matching\n2. Consider promotional strategies for high-priced items\n3. Maintain stock levels for products with high demand\n4. Review pricing strategy based on market averages\n\n---\n*Report generated by Apon Family Mart Intelligence System*\n"""
    logger.info(f"Generated report with {len(analyses)} product analyses")
    return report
